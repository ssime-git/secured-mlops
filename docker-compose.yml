services:
  # Traefik reverse proxy with secure configuration
  traefik:
    image: traefik:v2.9
    container_name: traefik
    restart: unless-stopped
    env_file:
      - .env
      - ./config/traefik-https.env
    environment:
      - SSL_EMAIL=${SSL_EMAIL:-user@example.com}
    extra_hosts:
      - "dev.localhost:127.0.0.1"
      - "api.localhost:127.0.0.1"
      - "metrics.localhost:127.0.0.1"
      - "dashboard.localhost:127.0.0.1"
      - "host.docker.internal:host-gateway"
    command:
      # Global configuration
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=frontend"
      
      # Enable the dashboard and API
      - "--api.dashboard=true"
      - "--api.insecure=false"
      
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      
      # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      
      # Enable Let's Encrypt with HTTP challenge
      - "--certificatesresolvers.leresolver.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.leresolver.acme.httpchallenge.entrypoint=web"
      
      # Enable Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=secured-mlops_backend"
      
      # Log level
      - "--log.level=DEBUG"
    ports:
      - "9080:80"
      - "9443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    labels:
      # Secure dashboard with HTTPS and basic auth
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls.certresolver=leresolver"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth,security-headers"
      
      # Basic authentication for dashboard (admin:admin)
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
      
      # Security headers middleware
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
    networks:
      - frontend
      - backend

  # Code Server for development
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: ml-dev-env
    restart: unless-stopped
    # Add local domain resolution within the container
    extra_hosts:
      - "dev.localhost:127.0.0.1"
      - "api.localhost:127.0.0.1"
      - "metrics.localhost:127.0.0.1"
      - "dashboard.localhost:127.0.0.1"
      - "host.docker.internal:host-gateway"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - PASSWORD=${CODE_SERVER_PASSWORD:-secure_dev_password_123}
      - SUDO_PASSWORD=${CODE_SERVER_PASSWORD:-secure_dev_password_123}
      - DEFAULT_WORKSPACE=/config/workspace
    volumes:
      - ./code-server/config:/config
      - ./workspace:/config/workspace
      - ./models:/config/models
      - ./code-server/data:/config/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./code-server/custom-init.sh:/custom-cont-init.d/setup.sh
    # No direct port exposure - access through Traefik only
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.code.rule=Host(`dev.localhost`)"
      - "traefik.http.routers.code.entrypoints=websecure"
      - "traefik.http.routers.code.tls.certresolver=leresolver"
      - "traefik.http.services.code.loadbalancer.server.port=8443"
      - "traefik.http.routers.code.middlewares=security-headers"
    networks:
      - frontend
      - backend

  # ML API Service
  ml-api:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: ml-api
    restart: unless-stopped
    # Add local domain resolution within the container
    extra_hosts:
      - "dev.localhost:127.0.0.1"
      - "api.localhost:127.0.0.1"
      - "metrics.localhost:127.0.0.1"
      - "dashboard.localhost:127.0.0.1"
      - "host.docker.internal:host-gateway"
    environment:
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    # Run as non-root user for better security
    user: "mluser"
    volumes:
      - ./models:/app/models  # Model access for training and serving
      - ./logs:/app/logs
    # No direct port exposure - access through Traefik only
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ml-api.rule=Host(`api.localhost`)"
      - "traefik.http.routers.ml-api.entrypoints=websecure"
      - "traefik.http.routers.ml-api.tls.certresolver=leresolver"
      - "traefik.http.services.ml-api.loadbalancer.server.port=8000"
      - "traefik.http.routers.ml-api.middlewares=security-headers"
      # API rate limiting (100 requests per minute)
      - "traefik.http.middlewares.api-security.ratelimit.average=100"
      - "traefik.http.middlewares.api-security.ratelimit.burst=50"
      - "traefik.http.middlewares.api-security.ratelimit.period=1m"
      
    depends_on:
      - redis
    networks:
      - frontend
      - backend

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: ml-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --bind 0.0.0.0
      --port 6379
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 100
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    sysctls:
      - net.core.somaxconn=1024
    networks:
      - backend

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ml-prometheus
    restart: unless-stopped
    env_file: .env
    # Run as non-root user (nobody) for better security
    user: "65534:65534"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:z
    # Add dependency on init container to set proper permissions
    depends_on:
      - prometheus-init
    networks:
      - frontend
      - backend
    # No direct port exposure - access through Traefik only
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=leresolver"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=prometheus-auth,security-headers"
      # Basic auth for Prometheus (metrics:metrics)
      - "traefik.http.middlewares.prometheus-auth.basicauth.users=${PROMETHEUS_AUTH}"
      
  # Init container to set proper permissions for Prometheus data directory
  prometheus-init:
    image: busybox:latest
    container_name: prometheus-init
    restart: "no"
    user: "root"
    command: ["sh", "-c", "chmod -R 777 /prometheus && chown -R 65534:65534 /prometheus"]
    volumes:
      - prometheus_data:/prometheus
      
    networks:
      - frontend
      - backend

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ml-grafana
    restart: unless-stopped
    user: "1000:1000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel-ng
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    # No direct port exposure - access through Traefik only
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=leresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=security-headers"
    depends_on:
      - prometheus
    networks:
      - frontend
      - backend

networks:
  frontend:
    driver: bridge
    enable_ipv6: false
    # Add DNS configuration for frontend network
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
    # Add DNS aliases for local domains
    name: frontend
  backend:
    driver: bridge
    internal: true
    enable_ipv6: false
  ml-network:
    driver: bridge
    # Ensure proper DNS resolution between containers
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local